# Processo seletivo - QA

Bem vindo, candidato. 

Estamos felizes que você esteja participando do processo seletivo para a vaga de QA do Instituto SENAI de Tecnologia em Soluções digitais.

A prova utilizará das seguintes tecnologias: 
- Linguagem de programação para web
- Docker
- Banco de dados relacional
- GIT

Fica à sua escolha quais frameworks e servidor serão utilizados, desde que seja uma aplicação web. 

O banco de dados relacional deverá ser postgreSQL. 

Na etapa da entrevista deverá ser apresentado a aplicação em funcionamento.

## Instruções para a execução da prova

A prova deve ser uma aplicação web. Você pode escolher a tecnologia que achar conveniente (PHP, JAVA, etc...).

O Banco utilizado na prova deve ser PostgreSQL.

Esse repositório possui apenas esse Readme com as instruções da prova. No entanto, **todo desenvolvimento deve ser commitado nesse repositório** até a data citada no email, enviado por nossa equipe.

Commite nesse repositório o script utilizado na criação do banco de dados (se aplicável).

Por fim, altere esse arquivo com as instruções de como poderemos testar o seu código (quais libs usar, qual servidor, etc) abaixo.

## Será avaliado
- Qualidade do código quanto a:
<<<<<<< HEAD
=======

- Facilidade no entedimento

- Complexidade ciclomática

- Divisão de resposabilidade das classes# Processo seletivo - QA

Bem vindo, candidato. 

Estamos felizes que você esteja participando do processo seletivo para a vaga de QA do Instituto SENAI de Tecnologia em Soluções digitais.

A prova utilizará das seguintes tecnologias: 
- Linguagem de programação para web
- Docker
- Banco de dados relacional
- GIT

Fica à sua escolha quais frameworks e servidor serão utilizados, desde que seja uma aplicação web. 

O banco de dados relacional deverá ser postgreSQL. 

Na etapa da entrevista deverá ser apresentado a aplicação em funcionamento.

## Instruções para a execução da prova

A prova deve ser uma aplicação web. Você pode escolher a tecnologia que achar conveniente (PHP, JAVA, etc...).

O Banco utilizado na prova deve ser PostgrSQL.

Esse repositório possui apenas esse Readme com as instruções da prova. No entanto, **todo desenvolvimento deve ser commitado nesse repositório** até a data citada no email, enviado por nossa equipe.

Commite nesse repositório o script utilizado na criação do banco de dados (se aplicável).

Por fim, altere esse arquivo com as instruções de como poderemos testar o seu código (quais libs usar, qual servidor, etc) abaixo.

## Será avaliado
- Qualidade do código quanto a:
>>>>>>> 1649e1b18fd1a2a1c45ffab59bc67a9547853f4c
  - Facilidade no entedimento
  - Complexidade ciclomática
  - Divisão de resposabilidade das classes
  - Reutilização de código
<<<<<<< HEAD
=======
- Qualidade quanto a interface:
  - Fácil usabilidade
  - Acessibilidade
  - Feedback ao usuário
- Qualidade quanto aos requisitos:
  - Desenvolvimento e funcionamento dos requisitos propostos

## Informações extras

- Descreva ao final deste documento (Readme.md) o detalhamento de funcionalidades implementadas, sejam elas já descritas na modelagem e / ou extras.
- Detalhar também as funcionalidades que não conseguiu implementar e o motivo.
- Caso tenha adicionado novas libs ou frameworks, descreva quais foram e porque dessa agregação.

(Escreva aqui as instruções para que possamos corrigir sua prova, bem como qualquer outra observação sobre a prova que achar pertinente compartilhar)

## Funcionalidades

O Sistema atende as necessidades de agendar eletrônicamente os atendimentos aos quais os clientes do SENAI/SC precisam.
A Aplicação foi desenvolvida com o frameworks Codeigniter 4 com a ferramenta Bootscrap e Awesome para ajudar na qualidade do layout, banco de dados PostgreSQL v13.4, PHP v7.4 com Apahe e utilizei o Docker para facilitar na disponibilidade no compartilhamento da aplicação.

## Como rodar: Construindo as imagens do Docker

- Com um terminal service, acesse a pasta raíz do projeto e construa cada imagem (PostgreSQL e PHP) com os seguintes comandos:

docker build -t postgre-imagem:latest -f db/Dockerfile .

docker build -t php-imagem:latest -f app/Dockerfile .

## Rodando os containers: 

- Na pasta raíz do projeto, execute um de cada vez

docker run --rm --name postgre-container -p 15432:5432 -e POSTGRES_PASSWORD=214365 -e POSTGRES_USER=postgres -e POSTGRES_DB=postgres -d postgre-imagem:latest

docker run --rm --name php-container -p 8888:80 --link postgre-container -d php-imagem:latest

## Testes

Após a conclusão dos códigos do Docker, abra seu navegador e acesse o endereço http://localhost:8888 o qual irá para tela inicial do app.

- Nota: Tive alguns contratempos de saúde familiar e por isso não consegui concluir a codificação, foi feito todo processo para o Docker rodar a aplicação e suas dependências assim como todo o layout das telas apresentadas na modelagem. Tenho preferência em utilizar o Codeigniter 4 por sua segurança, ampla biblioteca de recursos e claro, o desempenho!

Desde já agradeço a atenção de vocês, obrigado e aguardo o resultado da avaliação ansioso!


- Reutilização de código

>>>>>>> 1649e1b18fd1a2a1c45ffab59bc67a9547853f4c
- Qualidade quanto a interface:
  - Fácil usabilidade
  - Acessibilidade
  - Feedback ao usuário
- Qualidade quanto aos requisitos:
  - Desenvolvimento e funcionamento dos requisitos propostos

## Informações extras

- Descreva ao final deste documento (Readme.md) o detalhamento de funcionalidades implementadas, sejam elas já descritas na modelagem e / ou extras.
- Detalhar também as funcionalidades que não conseguiu implementar e o motivo.
- Caso tenha adicionado novas libs ou frameworks, descreva quais foram e porque dessa agregação.

(Escreva aqui as instruções para que possamos corrigir sua prova, bem como qualquer outra observação sobre a prova que achar pertinente compartilhar)


## Instrução para testes
Estou utilizando o servidor da Google Cloud para hospedagem da aplicação desenvolvida e pode ser acessada no seguinte link:
https://php-caecrgswkq-uc.a.run.app
